#!/bin/bash

#SBATCH --job-name=prefetch_lib         # Job name to show with squeue
#SBATCH --output=prefetch_lib_%j.out    # Output file
#SBATCH --ntasks=88                     # Maximum number of cores to use
#SBATCH --time=1-00:00:00               # Time limit to execute the job
#SBATCH --mem-per-cpu=1G                # Required Memory per core
#SBATCH --cpus-per-task=2               # CPUs assigned per task.
#SBATCH --qos=short                     # QoS: short,medium,long,long-mem

#******************************************************************************
#  
#   Prefetch_submit.sh
#
#   This program executes the Prefetch.sh program in parallel to
#   download the libraries of a group of SRA projects and perform a
#   quality control check (FastQC).
#
#   Author: Antonio Gonzalez Sanchez
#   Date: 16/10/2023
#   Version: 2.0 
#
#******************************************************************************


################################################################################
#                       1. DOWNLOAD LIBRARIES IN PARALLEL                      #
################################################################################

# Paths
path_in=/storage/ncRNA/Projects/sRNA_project/01-Accession_list
path_out=/storage/ncRNA/Projects/sRNA_project/03-Raw_data
path_out_fastqc=/storage/ncRNA/Projects/sRNA_project/04-FastQC_data

# List project files with accession list
project_acc_path_list=$( ls -d1 $path_in/* )

# Iterate files list
for project_acc_path in $project_acc_path_list
do
    ## Execute Prefetch.sh program
    srun -N1 -n1 -c$SLURM_CPUS_PER_TASK --quiet --exclusive ./Prefetch.sh \
        -p $project_acc_path \
        -o $path_out \
        -f $path_out_fastqc &
done
wait


################################################################################
#     2. DOWNLOAD THOSE LIBRARIES THAT COULD NOT BE DOWNLOADED IN PARALLEL     #
################################################################################

# List and iterate error files
error_project_list=$( ls -d1 ./tmp/*_error.txt )

if [ -n "$error_project_list" ]
then
    for error_project_path in $error_project_list
    do
        # List and iterate runs that have failed (file lines)
        list_of_error_runs="$(cat $error_project_path)"
        for error_SRR_line in $list_of_error_runs
        do

            # Get species, project and run names
            species=$(echo -e "$error_SRR_line" | cut -f1)
            project=$(echo -e "$error_SRR_line" | cut -f2)
            error_SRR=$(echo -e "$error_SRR_line" | cut -f3)

            # Paths
            path_out_data=$path_out/$species/$project
            path_out_qc=$path_out_fastqc/$species/$project

            # Download file
            if prefetch --output-directory ./tmp $error_SRR --verify yes --check-all
            then

                # Extract the fastq file (single) or files (paired)
                if fasterq-dump --split-files --temp ./tmp -O $path_out_data ./tmp/$error_SRR/$error_SRR.sra
                then
                    # Delete temporary files generated by fasterq-dump.
                    rm -r ./tmp/$error_SRR

                    # Obtain fastqc data
                    if [ -e $path_out_data/$error_SRR"_1.fastq" ] && [ -e $path_out_data/$error_SRR"_2.fastq" ];
                    then
                        # Compress to .gz.
                        gzip $path_out_data/$error_SRR"_1.fastq"
                        gzip $path_out_data/$error_SRR"_2.fastq"

                        # Fastqc.
                        fastqc $path_out_data/$error_SRR"_1.fastq.gz"
                        fastqc $path_out_data/$error_SRR"_2.fastq.gz"
                        mv $path_out_data/$error_SRR"_1_fastqc.zip" $path_out_qc
                        mv $path_out_data/$error_SRR"_1_fastqc.html" $path_out_qc
                        mv $path_out_data/$error_SRR"_2_fastqc.zip" $path_out_qc
                        mv $path_out_data/$error_SRR"_2_fastqc.html" $path_out_qc
                    else
                        # Compress to .gz.
                        gzip $path_out_data/$error_SRR".fastq"

                        # Fastqc.
                        fastqc $path_out_data/$error_SRR".fastq.gz"
                        mv $path_out_data/$error_SRR"_fastqc.zip" $path_out_qc
                        mv $path_out_data/$error_SRR"_fastqc.html" $path_out_qc
                    fi
                else
                    # If the fasterq-dump command fails...
                    printf "$species\t$project\t$error_SRR\n" >> failed_runs.txt
                fi
            else
                # If the prefetch command fails...
                printf "$species\t$project\t$error_SRR\n" >> failed_runs.txt
            fi
        done
    done
fi

# Delete temporary directory
rm -r ./tmp

exit 0
